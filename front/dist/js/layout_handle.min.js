Graph.prototype.initChooseLayoutEvent=function(){var m=this,t=m.node_key,e=$("#sort-Selector");for(label in t){var o="<option value='"+t[label]+"'>"+t[label]+"</option>";e.append(o)}m.chooseLayoutSelector.change(function(t){var e=$(this).find("option:selected").val();if(m.layoutStartButton.removeClass("disabled"),$(".input-layout-option").remove(),0==e){var o=$("<input type='text' class='form-control layout-option input-layout-option' id='start-angle' placeholder='start angle eg:1.5'>"),n=$("<select class='custom-select layout-option input-layout-option' id='sort-Selector'></select>"),i=m.node_key;for(label in i){var a="<option value='"+i[label]+"'>"+i[label]+"</option>";n.append(a)}m.layoutOptionBox.prepend(n),m.layoutOptionBox.prepend(o)}else if(1!=e)if(2==e){var l=$("<input type='text' class='form-control layout-option input-layout-option' id='gird-cols' placeholder='cols eg:100'>"),r=$("<input type='text' class='form-control layout-option input-layout-option' id='gird-rows' placeholder='rows eg:100'>");m.layoutOptionBox.prepend(r),m.layoutOptionBox.prepend(l)}else if(3==e){o=$("<input type='text' class='form-control layout-option input-layout-option' id='start-angle' placeholder='start angle eg:1.5'>"),n=$("<select class='custom-select layout-option input-layout-option' id='sort-Selector'></select>");var p=m.node_key;n=m.initOptions(n,p),m.layoutOptionBox.prepend(n),m.layoutOptionBox.prepend(o)}else if(4==e){var s=$("<select class='custom-select layout-option input-layout-option' id='is-circle'></select>"),u=$("<input type='text' class='form-control layout-option input-layout-option' id='root-node-id' placeholder='root-nodes-id:  please join id with ? eg:1?2?8'>");u.attr("data-inputmask","'mask':999-999-9999");p=[!0,!1];s=m.initOptions(s,p),m.layoutOptionBox.prepend(u),m.layoutOptionBox.prepend(s)}else if(5==e){var c=$("<input type='text' class='form-control layout-option input-layout-option' id='refresh-input' placeholder='refresh times eg:20'>"),d=$("<input type='text' class='form-control layout-option input-layout-option' id='gravity-input' placeholder='gravity eg:1.0'>");m.layoutOptionBox.prepend(d),m.layoutOptionBox.prepend(c)}else if(6!=e&&7!=e)if(8==e){var y=$("<input type='text' class='form-control layout-option input-layout-option' id='hooke-input' placeholder='Hooke law coefficient on [0,1] eg:0.008'>"),f=$("<input type='text' class='form-control layout-option input-layout-option' id='springlength-input' placeholder='Spring ideal length on eg:80'>");m.layoutOptionBox.prepend(f),m.layoutOptionBox.prepend(y)}else if(9==e){var v=$("<input type='text' class='form-control layout-option input-layout-option' id='edgelength-input' placeholder='Edge ideal length on eg:50'>"),g=$("<input type='text' class='form-control layout-option input-layout-option' id='maxnumiter-input' placeholder='max iter num eg: 2500'>");m.layoutOptionBox.prepend(g),m.layoutOptionBox.prepend(v)}})},Graph.prototype.startLayout=function(){var C=this;C.layoutStartButton.click(function(){event.preventDefault();var t=$(C.chooseLayoutSelector).find("option:selected").val();if(0==t){var e=$("#start-angle"),o=$("#sort-Selector");if(C.isElementSuccessfullyGet(e,o))var n=e.val(),i=o.val(),a={name:"circle",startAngle:(n=""==n?0:2-(n=parseFloat(n)))*Math.PI,sort:function(t,e){return t.data(i)-e.data(i)}}}else if(1==t)a={name:"random"};else if(2==t){var l=$("#gird-cols"),r=$("#gird-rows");if(C.isElementSuccessfullyGet(l,r)){var p=r.val(),s=l.val();""!=p&&""!=s?(p=parseInt(p),s=parseInt(s)):(""==p&&(p=void 0),""==s&&(s=void 0)),a={name:"grid",rows:p,cols:s}}}else if(3==t){e=$("#start-angle"),o=$("#sort-Selector");if(C.isElementSuccessfullyGet(e,o))n=e.val(),i=o.val(),a={name:"concentric",startAngle:(n=""==n?0:2-(n=parseFloat(n)))*Math.PI,sort:function(t,e){return t.data(i)-e.data(i)}}}else if(4==t){var u=$("#is-circle"),c=$("#root-node-id");if(C.isElementSuccessfullyGet(u,c)){var d=u.val();d="true"==d||"false"!=d&&void 0;var y=c.val();if(""==y)var f=void 0;else{var v=y.split("?"),g=[];for(id in v){var m="#"+v[id];g[id]=m}f=g.join(",")}if(null==f)var h=void 0;else h=C.cy.$(f);a={name:"breadthfirst",roots:h,circle:d}}}else if(5==t){var x=$("#refresh-input"),O=$("#gravity-input");if(C.isElementSuccessfullyGet(x,O)){var k=x.val(),B=O.val();""!=k&&""!=B?(k=parseInt(k),B=parseInt(B)):(""==k&&(k=20),""==B&&(B=1));a={name:"cose"}}}else if(6==t){var b=C.node_key;if(-1<b.indexOf("posX")&&b.indexOf("posY"))a={name:"preset",positions:function(t){var e=t.data("posX"),o=t.data("posY");return console.log(e),console.log(o),{x:e,y:o}}};else $(this).addClass("disabled")}else if(7==t)a={name:"d3-force",animate:!1,fit:!0,linkId:function(t){return t.id},linkDistance:100,manyBodyStrength:-600,randomize:!1,infinite:!1};else if(8==t){var S=$("#hooke-input"),G=$("#springlength-input"),_=S.val(),w=G.val();_=""==_?.008:parseFloat(_);a={name:"euler",springLength:w=""==w?80:parseFloat(w),springCoeff:_}}else if(9==t){var E=$("#edgelength-input"),I=$("#maxnumiter-input"),F=E.val(),L=I.val();a={name:"fcose",idealEdgeLength:F=""==F?50:parseFloat(F),numIter:L=""==L?2500:parseFloat(L)}}else if(10==t)a={name:"klay",animate:!0};else if(11==t)a={name:"spread"};else 12!=t&&13!=t&&14!=t||wnatajax.get({url:"/analysis/getlayout/",data:{id:C.id,layout:t},success:function(t){if(200==t.code){var o=t.data,e={name:"preset",positions:function(t){var e=t.id();return{x:o[e][0],y:o[e][1]}}};if(C.is_recombination_network())var n=C.cy.nodes(":child").union(C.cy.edges()).layout(e);else n=C.cy.layout(e);n.run()}},fail:function(t){}});if(12!=t&&13!=t&&14!=t){if(C.is_recombination_network())var j=C.cy.nodes(":child").union(C.cy.edges()).layout(a);else j=C.cy.layout(a);j.run()}})},Graph.prototype.is_recombination_network=function(){return-1<this.node_key.indexOf("parent")},Graph.prototype.initResetControl=function(){var t=this;t.resetButton.click(function(){event.preventDefault(),t.cy.fit(t.container)})},Graph.prototype.isElementSuccessfullyGet=function(t,e){return NaN!=t.val()&&"object"==typeof t&&NaN!=e.val()&&"object"==typeof e},Graph.prototype.toastsInfo=function(t,e,o){$(document).Toasts("create",{class:"bg-success",title:t,subtitle:e,position:"topRight",body:o})};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
