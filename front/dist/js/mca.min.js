Graph.prototype.initSideBarEvent=function(){var t=this;t.sideBarNav.click(function(){"left"===$(this).attr("direction")?(t.drapBox.css("bottom",-68),t.secondFloor.animate({left:0},500),t.drapBox.attr("page",1)):(t.drapBox.css("bottom",0),t.secondFloor.animate({left:-1150},500),t.drapBox.attr("page",2))})},Graph.prototype.initCentralityRangeChange=function(){var s=this;s.centralityRange.each(function(t,a){var r=$(a);r.change(function(){var t=r.attr("centrality_type"),a=r.val(),e=r.attr("text");$("#text-"+t).text(e+":"+parseFloat(a)/100)})}),s.refreshButton.click(function(){var r=[],n=[];if(s.centralityRange.each(function(t,a){var e=$(a);e.attr("disabled")||0!==parseInt(e.val())&&(r.push(e.attr("centrality_type")),n.push(parseInt(e.val())))}),0!==r.length){var t=JSON.stringify(r),a=JSON.stringify(n),e=s.mapChannel.val(),i=s.mapChannel.val();switch(e){case"Size":var o=s.maxSizeInput.val(),l=s.minSizeInput.val();if(!(""!=o&""!=l))return;e+="?",e+=o,e+="?",e+=l;break;case"Color":e+="?",e+=s.colorSelector.val()}e+="?",e+=s.mapNormalization.val(),wnatajax.get({url:"/analysis/refresh/",data:{id:s.id,types:t,typeValue:a,map:e},success:function(t){if(200==t.code){var a=JSON.parse(t.data),e=t.message,r=a[0],n=a[1];s.handleVisualMap(r,i,"Node"),s.drawMultiLine(n,e[0]),s.resultInput.val("pearsonr:"+e[1])}},fail:function(t){}})}})},Graph.prototype.initCentralityRangeReset=function(){var n=this;n.centralityRange.each(function(t,a){var e=$(a);e.val("0");var r=e.attr("centrality_type");-1===n.node_key.indexOf(r)?e.attr("disabled",!0):e.attr("disabled",!1)})},Graph.prototype.drawMultiLine=function(t,a){for(var e=[],r=t[0].length,n=0;n<=r-1;n++)e.push(n);var i=[];for(var n in t){var o=t[n];i.push({name:a[n],type:"line",label:{position:"bottom"},data:o})}var l={title:{text:"MCA",left:"center"},tooltip:{},grid:{left:"3%",right:"4%",bottom:"3%",containLabel:!0},toolbox:{},xAxis:{type:"category",boundaryGap:!1,data:e},yAxis:{type:"value"},dataZoom:[{type:"slider",start:10,end:60},{type:"inside",start:10,end:60}],series:i};this.mychart.setOption(l,!0)};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
