Graph.prototype.initDiagramSubmitButton=function(){var o=this;o.diagramButton.click(function(){event.preventDefault();var t=o.directChoose.val(),e=o.diagramChoose.val(),a=o.conceptChoose.val(),r=o.typeChoose.val();"Entirety"==t?o.ajaxGetEntireNetworkStatistics(o.id,a,e,r):"topology"==e?(o.visualMap(a,t),console.log("视觉映射点线")):o.ajaxGetNetworkStatistics(o.id,a,r,t)})},Graph.prototype.ajaxGetEntireNetworkStatistics=function(t,f,u,h){var g=this;wnatajax.get({url:"/analysis/hotmap/",data:{id:t,type:f},success:function(t){if(200==t.code){for(var e=t.message.size,a=[],r=0;r<=e-1;r++)a.push(r.toString());var o=t.data;if(o=JSON.parse(o),"shortpath"==f){var i=[];for(r=0;r<=e-1;r++){for(var s=0,n=0;n<=e-1;n++)s+=o[r*e+n][2];i.push(s),s=0}var l=0;for(r=0;r<i.length-1;r++)l+=i[r];var p=l/e;if(g.resultInput.val("average:"+p),"topology"==u)console.log("视觉映射");else if("line"==h||"bar"==h)g.drawLineOrBar(a,i,f,h);else if("polar"==h){var c=[];for(r=0;r<e;r++){var d=r/e*360;c.push([i[r],d])}g.drawPolar(c,f,"line")}else if("bar-polar"==h){for(c=[],r=0;r<e;r++){d=r/e*360;c.push([i[r],d])}g.drawPolar(c,f,"bar")}}else if("degreehistogram"==f)g.degreeHistogramScatter(o,f);else if("kcore"==f){o=t.data;if(o=JSON.parse(o),"topology"==u)g.kCoreTopology(o);else{o=t.data;o=JSON.parse(o),"bar"==h?g.kCoreBar(o,e):"pie"==h&&g.kCorePie(o,e)}}else"node_connectivity"==f?g.resultInput.val("node_connectivity:"+o):"graphdensity"==f?g.resultInput.val("graph density:"+o):"betweenesshistogram"==f&&g.degreeHistogramScatter(o,f)}},fail:function(t){}})},Graph.prototype.ajaxGetNetworkStatistics=function(t,p,c,e){var y=this;"radar"==c?wnatalert.alertOneInput({title:"Please Input Node ID With Radar",text:"You Can Join Multi Node ID with ?",inputValue:1,confirmButtonText:"Confirm",cancelButtonText:"Cancel",confirmCallback:function(g){wnatalert.close(),wnatajax.get({url:"/analysis/statistics/",data:{id:t,type:c,node_id:g},success:function(t){if(200==t.code){var e=g.split("?"),a=t.message.labels,r=t.message.size,o=t.data;o=JSON.parse(o);for(var i=[],s=[],n=0;n<=a.length-1;n++){var l={name:a[n],max:1.5};i.push(l)}var p={},c=[];for(n=0;n<r;n++){for(var d=o[n],f=0;f<a.length;f++)c.push(d[a[f]]);p={name:e[n],value:c},c=[],s.push(p)}var u={title:{text:"Radar"},tooltip:{},legend:{},radar:{name:{textStyle:{color:"#fff",backgroundColor:"#999",borderRadius:3,padding:[3,5]}},indicator:i},series:[{name:"Radar",type:"radar",data:s}]};y.mychart.setOption(u,!0)}else{var h=t.message;wnatalert.alertError(h)}},fail:function(t){}})}}):wnatajax.get({url:"/analysis/statistics/",data:{id:t,type:p,is_node:e},success:function(t){if(200==t.code){var e=t.message.size,a=t.message.average;if(-1!=p.indexOf("communities"))var r="modularity:"+a;else r="average:"+a;y.resultInput.val(r);var o=t.data;if(o=JSON.parse(o),"line"==c){for(var i=[],s=[],n=0;n<e;n++)i.push(n.toString()),s.push(o[n]);y.drawLineOrBar(i,s,p,"line")}else if("polar"==c){for(s=[],n=0;n<e;n++){var l=n/e*360;s.push([o[n],l])}y.drawPolar(s,p,"line")}else if("bar"==c){for(i=[],s=[],n=0;n<e;n++)i.push(n.toString()),s.push(o[n]);y.drawLineOrBar(i,s,p,"bar")}else if("bar-polar"==c){for(s=[],n=0;n<e;n++){l=n/e*360;s.push([o[n],l])}y.drawPolar(s,p,"bar")}else"pie"==c&&y.drawPie(o,p)}},fail:function(t){}})},Graph.prototype.drawLineOrBar=function(t,e,a,r){var o={title:{text:a,left:"center"},legend:{},tooltip:{},dataZoom:[{type:"slider",start:10,end:60},{type:"inside",start:10,end:60}],xAxis:{type:"category",data:t},yAxis:{type:"value"},series:[{type:r,data:e}]};this.mychart.setOption(o,!0)},Graph.prototype.drawPolar=function(t,e,a){var r={title:{text:e},legend:{},polar:{},tooltip:{trigger:"axis",axisPointer:{type:"cross"}},angleAxis:{type:"value",startAngle:0},radiusAxis:{},series:[{name:"line",type:a,coordinateSystem:"polar",data:t}]};this.mychart.setOption(r,!0)},Graph.prototype.degreeHistogramScatter=function(t,e){var a=[];for(var r in t){var o=t[r];0==o[1]||a.push(o)}var i={title:{text:e,left:"center"},dataZoom:[{type:"slider",start:10,end:60},{type:"inside",start:10,end:60}],xAxis:{type:"value",splitLine:{lineStyle:{type:"dashed"}}},yAxis:{type:"value",splitLine:{lineStyle:{type:"dashed"}}},series:[{name:"scatter",type:"scatter",emphasis:{label:{show:!0,position:"left",color:"blue",fontSize:16}},data:a}]};this.mychart.setOption(i,!0)},Graph.prototype.kCoreTopology=function(r){var o=this,i=0;o.cy.nodes().forEach(function(t,e,a){e==r[i]?(t.style("background-color",o.color),i++):t.style("background-color","")})},Graph.prototype.kCorePie=function(t,e){var a={title:{text:"kcore-pie",left:"center"},tooltip:{},legend:{orient:"vertical",left:"left",data:["kcore","other-subgraph"]},series:[{name:"kcore",type:"pie",radius:"55%",center:["50%","60%"],data:[{value:t.length,name:"kcore"},{value:e-t.length,name:"other-subgraph"}],emphasis:{itemStyle:{shadowBlur:10,shadowOffsetX:0,shadowColor:"rgba(0, 0, 0, 0.5)"}}}]};this.mychart.setOption(a)},Graph.prototype.kCoreBar=function(t,e){var a={xAxis:{type:"category",data:["all-graph","kcore"]},yAxis:{type:"value"},series:[{data:[e,t.length],type:"bar"}]};this.mychart.setOption(a)},Graph.prototype.communitiesVisualMap=function(t){for(var e=this.colors,a=0;a<t.length-1;a++)for(var r=t[a],o=0;o<r.length;o++){this.cy.$("#"+r[o]).style("background-color",e[a])}},Graph.prototype.communitiesDiagram=function(t,e,a){if(console.log(t),"pie"==e){for(var r=[],o=[],i=0;i<=t.length-1;i++)r.push((i+1).toString()),o.push({value:t[i].length,name:(i+1).toString()});var s={title:{text:"community-pie",left:"center"},tooltip:{},legend:{orient:"vertical",left:"left",data:r},series:[{name:a,type:"pie",radius:"55%",center:["50%","50%"],data:o,emphasis:{itemStyle:{shadowBlur:10,shadowOffsetX:0,shadowColor:"rgba(0, 0, 0, 0.5)"}}}]}}else if("bar"==e){var n=[];for(o=[],i=0;i<=t.length-1;i++)n.push(i.toString()),o.push(t[i].length);s={title:{text:"community-pie",left:"center"},tooltip:{},xAxis:{type:"category",data:n},yAxis:{type:"value"},series:[{data:o,type:"bar"}]}}else if("pie+bar"==e){n=[];var l=[],p=[];for(i=0;i<=t.length-1;i++)n.push(i.toString()),l.push(t[i].length),p.push({value:t[i].length,name:i.toString()});s={title:{text:"community-pie+bar",left:"center"},tooltip:{trigger:"axis"},legend:[{orient:"vertical",left:"left",data:n},{orient:"vertical",left:"left",data:n}],xAxis:{type:"category"},yAxis:{gridIndex:0},grid:[{top:"50%",bottom:30,left:100}],series:[{type:"pie",data:p,radius:"30%",center:["50%","25%"]},{type:"bar",data:p}]}}this.mychart.setOption(s,!0)},Graph.prototype.drawPie=function(t,e){var a=[],r=0;for(var o in t){var i=t[o];a.push(i),r<i&&(r=i)}for(var s=[],n=1;n<=r;n++)s.push(0);for(var o in a){s[(i=a[o])-1]+=1}for(var o in a=[],s)a.push({name:parseInt(o)+1,value:s[o]});var l={title:{text:e,left:"center"},tooltip:{trigger:"item",formatter:"{b}:{c}"},series:[{type:"pie",data:a,emphasis:{itemStyle:{shadowBlur:10,shadowOffsetX:0,shadowColor:"rgba(0, 0, 0, 0.5)"}}}]};this.mychart.setOption(l,!0)},Graph.prototype.visualColorMapping=function(o,t){var e=this;if("Node"==t){var i=e.cy.nodes().max(function(t,e,a){return parseFloat(t.data(o))}),s=e.cy.nodes().min(function(t,e,a){return parseFloat(t.data(o))});i=i.value,s=s.value,e.cy.nodes().forEach(function(t,e,a){if(!t.isParent()){var r=parseFloat(t.data(o));r=(r=255-(r=parseInt((r-s)/i*255)))<=15?"#ff0"+(r=r.toString(16))+"00":"#ff"+(r=r.toString(16))+"00",t.style("background-color",r)}})}else{i=e.cy.edges().max(function(t,e,a){return parseFloat(t.data(o))}),s=e.cy.edges().min(function(t,e,a){return parseFloat(t.data(o))});i=i.value,s=s.value,e.cy.edges().forEach(function(t,e,a){var r=parseFloat(t.data(o));r=(r=255-(r=parseInt((r-s)/i*255)))<=15?"#ff0"+(r=r.toString(16))+"00":"#ff"+(r=r.toString(16))+"00",t.style("line-color",r)})}},Graph.prototype.entireVisualMapping=function(o){for(var i=o[0],s=o[0],t=1;t<o.length-1;t++)i>o[t]&&(i=o[t]),s<o[t]&&(s=o[t]);this.cy.nodes().forEach(function(t,e,a){if(!t.isParent()){var r=o[e];r=(r=255-(r=parseInt((r-i)/s*255)))<=15?"#ff0"+(r=r.toString(16))+"00":"#ff"+(r=r.toString(16))+"00",t.style("background-color",r)}})};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
