function TableControl(){this.tableContainer=$("#example2"),this.tabUl=$("#custom-content-below-tab"),this.tabContent=$("#custom-content-below-home"),this.optionChoose=$(".option-choose"),this.multiChoose=$(".multi-choose"),this.singleChoose=$(".single-choose"),this.partChoose=$(".partial-choose"),this.upLoadFile=$("#customFile"),this.uPLoadFileBtn=$(".upload-network-btn"),this.uploadLabel=$(".custom-file-label"),this.confirmBtn=$(".confirmation-btn"),this.index=0,this.tableUl=$(".table-ul"),this.getAverageValue=$(".get-value"),this.deleteValue=$(".delete-value"),this.partialSelector=$("#partial-network-select"),this.deleteGraphButton=$(".delete-graph"),this.networkTable=$("#network-table"),this.networkTable.DataTable()}function Generate(){this.generateGate=$("#generate-gate"),this.generateBox=$(".generate-network-pop-box"),this.generateTypeSelector=$("#generate-type-select"),this.kindSelector=$("#kind-select"),this.generateKindSelector=$("#generate-kind-select"),this.input1=$("#input-1"),this.input2=$("#input-2"),this.submitButton=$("#generate-submit-btn"),this.networkName=$("#network-name"),this.clearButton=$("#clear-button")}TableControl.prototype.TabClickEvent=function(){var r=this;r.tabUl.children("li").each(function(e,t){var a=e;$(t).click(function(){if($(this).children("a").addClass("active"),$(this).siblings().children("a").removeClass("active"),r.optionChoose.css("display","none"),0==a){r.multiChoose.css("display","block");var e="Multiple network means that you will creat multiple network for comparison."}else if(1==a){r.singleChoose.css("display","block");e="Single network means that you will analysis one network."}else if(a=2){r.partChoose.css("display","block");e="Calculating Network Parameters means you can calculate network parameter with the module."}r.tabContent.text(e),r.index=a})})},TableControl.prototype.initUpLoadEvent=function(){var n=this,o=["adjlist","csv","edgelist","gexf","gml","gpickle","graphml","json","leda","yaml","garph6","net",""];n.upLoadFile.change(function(){var e,t=n.upLoadFile[0].files[0],a=t.name,r=(e=a.split("."))[e.length-1];r=r.toLowerCase(),-1<o.indexOf(r)?(n.formDate=new FormData,n.formDate.append("file",t),n.uploadLabel.text(a)):wnatalert.alertInfo("Please Upload NetWork File Such as gml,gexf and so on.")}),n.uPLoadFileBtn.click(function(){null==n.formDate?wnatalert.alertInfo("Please Upload NetWork File Such as gml,gexf and so on."):wnatalert.alertOneInput({title:"Please Input NetWork Name",confirmButtonText:"Confirm",cancelButtonText:"Cancel",confirmCallback:function(e){n.formDate.append("network_name",e),wnatajax.post({url:"/analysis/upload/",data:n.formDate,processData:!1,contentType:!1,success:function(e){if(200==e.code)n.uploadLabel.text("Upload Network File"),n.formDate=void 0,wnatalert.close(),window.location.reload();else{var t=e.message;wnatalert.alertError(t)}},fail:function(e){wnatalert.alertInfo("Please Upload NetWork File Again.")}})}})})},TableControl.prototype.confirmClickEvent=function(){var r=this;r.confirmBtn.click(function(){var e=r.index,t=r.lableNESelector.bootstrapSwitch("state");if(0!=e&&1==e){var a=$("#single-network-select").val();""==a||r.ajaxGetData(a,t)}})},TableControl.prototype.ajaxGetData=function(d,g){var b=this;wnatajax.get({url:"/analysis/detail/",data:{ids:d,state:g},success:function(e){if(200==e.code){var t=e.message.len,a=e.message.columns,r=e.message.names,n=e.data;n=JSON.parse(n),a=JSON.parse(a);for(var o=0;o<t;o++){var i=n[o],l=a[o],p=(r[o],"#table_"+d[o]+g);if(0<$(p).length)break;b.initNewTable(d[o],r[o],g);var h="#tr_"+d[o]+g,s=$(h);for(var c in l){var u="<th>"+l[c].data+"</th>";s.append(u)}$(p).DataTable({data:i,columns:l})}}},fail:function(e){}})},TableControl.prototype.initSingleSelector=function(){this.partialSelector.change(function(){$(".average").text(" ")})},TableControl.prototype.initNetworkFilter=function(){var r=this;r.getAverageValue.each(function(e,t){var a=$(this);a.click(function(){var e=r.partialSelector.val(),t=a.parent().attr("data-type");r.ajaxGetStaValue(e,t)})})},TableControl.prototype.ajaxGetStaValue=function(e,a){if(-1<["edgebetweeness"].indexOf(a))var t="Link";else t="Node";wnatajax.get({url:"/analysis/statistics/",data:{id:e,type:a,is_node:t},success:function(e){if(200==e.code){console.log(e);var t=e.message.average;t=t.toFixed(4),$("#average-"+a).text(t)}},fail:function(e){}})},TableControl.prototype.initNewTable=function(e,t,a){if(a)var r=" node list";else r=" edge list";var n=$('<li id="li_'+e+a+'"><div class="card"><div class="card-header"><h3 class="card-title">'+t+r+'<a href="javascript:void(0)" style="color: black;" id="a_'+e+a+'"><i class="fa fa-times"></i></a></h3></div><div class="card-body"><table id="table_'+e+a+'" class="table table-bordered table-hover"><thead><tr id="tr_'+e+a+'"></tr></thead><tbody></tbody></table></div></div></li>');this.tableUl.append(n);var o="#li_"+e+a;$("#a_"+e+a).click(function(){$(o).remove()})},TableControl.prototype.labelNESelectorEvent=function(){this.lableNESelector=$("input[data-bootstrap-switch]"),this.lableNESelector.bootstrapSwitch({onText:"node",offText:"edge",state:!1,onSwitchChange:function(e,t){}})},TableControl.prototype.initDeleteEvent=function(){var r=this;r.deleteValue.each(function(e,t){var a=$(t);a.click(function(){var e=r.partialSelector.val(),t=a.parent().attr("data-type");r.ajaxDeleteStaValue(e,t)})})},TableControl.prototype.ajaxDeleteStaValue=function(e,t){if("edgebetweeness"==t)var a="Link";else a="Node";wnatajax.post({url:"/analysis/deletefiled/",data:{id:e,type:t,is_node:a},success:function(e){200==e.code&&(console.log(e),$("#average-"+t).text("Deleted"))},fail:function(e){}})},TableControl.prototype.initDeleteGraph=function(){this.deleteGraphButton.click(function(){var e=$(this).attr("networkId");wnatajax.post({url:"/analysis/deletegraph/",data:{id:e},success:function(e){200==e.code&&window.location.reload()},fail:function(e){}})})},TableControl.prototype.run=function(){var e=this;e.TabClickEvent(),e.initUpLoadEvent(),e.labelNESelectorEvent(),e.confirmClickEvent(),e.initNetworkFilter(),e.initSingleSelector(),e.initDeleteEvent(),e.initDeleteGraph()},Generate.prototype.initGate=function(){var t=this;t.generateGate.click(function(){var e=$(this);"false"===e.attr("data-slide")?(t.generateBox.animate({right:0},500),e.attr("data-slide","true")):(t.generateBox.animate({right:-382.72},500),e.attr("data-slide","false"))})},Generate.prototype.run=function(){this.initGate(),this.initGenerateSelector(),this.initSubmitEvent()},Generate.prototype.initGenerateSelector=function(){var r=this;r.generateTypeSelector.change(function(){switch($(this).val()){case"Atlas":var e=["Atlas"];r.pushSelector(r.generateKindSelector,e),r.kindSelector.show(),r.input1.attr("placeholder","graph number in Atlas"),r.input1.show(),r.input2.hide();break;case"Classic":r.kindSelector.show();e=["balanced_tree","complete_graph","binomial_tree","complete_graph","circular_ladder_graph","full_rary_tree","ladder_graph","lollipop_graph","path_graph","star_graph","turan_graph","wheel_graph"];r.pushSelector(r.generateKindSelector,e),r.input1.show(),r.input2.show(),r.input1.attr("placeholder","each node will have r children"),r.input2.attr("placeholder","Height of the tree.");break;case"Lattice":e=["grid_2d_graph","hexagonal_lattice_graph","triangular_lattice_graph"];r.pushSelector(r.generateKindSelector,e),r.kindSelector.show(),r.input1.show(),r.input2.show(),r.input1.attr("placeholder","2d grid width"),r.input2.attr("placeholder","2d grid length");break;case"Small":e=["bull_graph","chvatal_graph","cubical_graph","desargues_graph","diamond_graph","dodecahedral_graph","frucht_graph","heawood_graph","house_graph","house_x_graph","hoffman_singleton_graph","icosahedral_graph","krackhardt_kite_graph","moebius_kantor_graph","octahedral_graph","petersen_graph","sedgewick_maze_graph","tetrahedral_graph","truncated_tetrahedron_graph","tutte_graph"];r.pushSelector(r.generateKindSelector,e),r.kindSelector.show(),r.input1.hide(),r.input2.hide();break;case"Random":e=["erdos_renyi_graph","small_world_graph","connected_small_world_graph","random_regular_graph","barabasi_albert_graph","powerlaw_cluster_graph","random_lobster"];r.kindSelector.show(),r.pushSelector(r.generateKindSelector,e),r.input1.show(),r.input2.show(),r.input1.attr("placeholder","node number"),r.input2.attr("placeholder","Probability for edge creation.");break;case"Directed":e=["gnr_graph","scale_free_graph"];r.kindSelector.show(),r.pushSelector(r.generateKindSelector,e),r.input1.show(),r.input2.show(),r.input1.attr("placeholder","The number of nodes for the generated graph"),r.input2.attr("placeholder","The redirection probability");break;case"Geometric":e=["random_geometric_graph","waxman_graph"];r.kindSelector.show(),r.pushSelector(r.generateKindSelector,e),r.input1.show(),r.input2.show(),r.input1.attr("placeholder","Number of nodes"),r.input2.attr("placeholder","Distance threshold value");break;case"AS":e=["random_internet_as_graph"];r.kindSelector.show(),r.pushSelector(r.generateKindSelector,e),r.input1.show(),r.input2.hide(),r.input1.attr("placeholder","Number of nodes");break;case"Social":e=["karate_club_graph","davis_southern_women_graph","florentine_families_graph","les_miserables_graph"];r.kindSelector.show(),r.pushSelector(r.generateKindSelector,e),r.input1.hide(),r.input2.hide();break;case"Community":e=["caveman_graph","connected_caveman_graph","ring_of_cliques","windmill_graph"];r.kindSelector.show(),r.pushSelector(r.generateKindSelector,e),r.input1.show(),r.input2.show(),r.input1.attr("placeholder","Number of cliques"),r.input2.attr("placeholder","Size of cliques");break;case"Trees":e=["random_tree"];r.kindSelector.show(),r.pushSelector(r.generateKindSelector,e),r.input1.show(),r.input2.hide(),r.input1.attr("placeholder","A positive integer representing the number of nodes in the tree");break;case"Cographs":e=["random_cograph"];r.kindSelector.show(),r.pushSelector(r.generateKindSelector,e),r.input1.show(),r.input2.hide(),r.input1.attr("placeholder","The order of the cograph")}}),r.generateKindSelector.change(function(){var e=r.generateTypeSelector.val();r.input1.val(""),r.input2.val("");var t=$(this).val();switch($("#input-3-box").remove(),e){case"Atlas":break;case"Classic":switch(t){case"balanced_tree":r.input1.show(),r.input2.show(),r.input1.attr("placeholder","each node will have r children"),r.input2.attr("placeholder","Height of the tree.");break;case"complete_graph":r.input1.show(),r.input2.hide(),r.input1.attr("placeholder","The number of node");break;case"binomial_tree":r.input1.show(),r.input2.hide(),r.input1.attr("placeholder"," Order of the binomial tree.");break;case"circular_ladder_graph":r.input1.show(),r.input2.hide(),r.input1.attr("placeholder"," Ladder length.");break;case"full_rary_tree":r.input1.show(),r.input2.show(),r.input1.attr("placeholder","branching factor of the tree"),r.input2.attr("placeholder","Number of nodes in the tree");break;case"ladder_graph":r.input1.show(),r.input2.hide(),r.input1.attr("placeholder","The Length of the Ladder");break;case"lollipop_graph":r.input1.show(),r.input2.show(),r.input1.attr("placeholder","The circle of lollipop"),r.input2.attr("placeholder","The path of lollipop");break;case"path_graph":r.input1.show(),r.input2.hide(),r.input1.attr("placeholder","The Length of the path");break;case"star_graph":r.input1.show(),r.input2.hide(),r.input1.attr("placeholder","The Length of the star outer");break;case"turan_graph":r.input1.show(),r.input2.show(),r.input1.attr("placeholder","The number of vertices."),r.input2.attr("placeholder","The number of partitions. Must be less than or equal to n");break;case"wheel_graph":r.input1.show(),r.input2.hide(),r.input1.attr("placeholder","The Length of the wheel")}break;case"Lattice":switch(t){case"grid_2d_graph":r.input1.show(),r.input2.show(),r.input1.attr("placeholder","2d grid width"),r.input2.attr("placeholder","2d grid length");break;case"hexagonal_lattice_graph":r.input1.show(),r.input2.show(),r.input1.attr("placeholder","The number of rows of hexagons in the lattice."),r.input2.attr("placeholder","The number of columns of hexagons in the lattice.");break;case"triangular_lattice_graph":r.input1.show(),r.input2.show(),r.input1.attr("placeholder","The number of rows in the lattice."),r.input2.attr("placeholder","The number of columns in the lattice")}break;case"Small":r.input1.hide(),r.input2.hide();break;case"Random":switch(t){case"erdos_renyi_graph":r.input1.show(),r.input2.show(),r.input1.attr("placeholder","The number of nodes."),r.input2.attr("placeholder","Probability for edge creation");break;case"small_world_graph":case"connected_small_world_graph":r.input1.show(),r.input2.show(),r.input1.attr("placeholder","The number of nodes."),r.input2.attr("placeholder","Each node is joined with its k nearest neighbors in a ring topology");a="<div class='form-group' id='input-3-box'><input type='text'class='form-control' id='input-3' placeholder='The probability of rewiring each edge'></div>";$("#generate-card-body").append($(a));break;case"random_regular_graph":r.input1.show(),r.input2.show(),r.input1.attr("placeholder","The degree of each node."),r.input2.attr("placeholder","The number of nodes");break;case"barabasi_albert_graph":r.input1.show(),r.input2.show(),r.input1.attr("placeholder","Number of nodes"),r.input2.attr("placeholder","Number of edges to attach from a new node to existing nodes");break;case"powerlaw_cluster_graph":r.input1.show(),r.input2.show(),r.input1.attr("placeholder","The number of nodes."),r.input2.attr("placeholder","the number of random edges to add for each new node");a="<div class='form-group' id='input-3-box'><input type='text'class='form-control' id='input-3' placeholder='Probability of adding a triangle after adding a random edge'></div>";$("#generate-card-body").append($(a));break;case"random_lobster":r.input1.show(),r.input2.show(),r.input1.attr("placeholder","The expected number of nodes in the backbone"),r.input2.attr("placeholder","Probability of adding an edge to the backbone");var a="<div class='form-group' id='input-3-box'><input type='text'class='form-control' id='input-3' placeholder='Probability of adding an edge one level beyond backbone'></div>";$("#generate-card-body").append($(a))}break;case"Directed":switch(t){case"gnr_graph":r.input1.show(),r.input2.show(),r.input1.attr("placeholder","The number of nodes for the generated graph"),r.input2.attr("placeholder","The redirection probability");break;case"scale_free_graph":r.input1.show(),r.input2.hide(),r.input1.attr("placeholder","The number of nodes for the generated graph")}break;case"Geometric":switch(t){case"random_geometric_graph":r.input1.show(),r.input2.show(),r.input1.attr("placeholder","Number of nodes"),r.input2.attr("placeholder","Distance threshold value");break;case"waxman_graph":r.input1.show(),r.input2.hide(),r.input1.attr("placeholder","Number of nodes")}break;case"AS":r.input1.show(),r.input2.hide(),r.input1.attr("placeholder","Number of nodes");break;case"Social":r.input1.hide(),r.input2.hide();break;case"Community":r.input1.show(),r.input2.show(),r.input1.attr("placeholder","Number of cliques"),r.input2.attr("placeholder","Size of cliques");break;case"Trees":r.input1.show(),r.input2.hide(),r.input1.attr("placeholder","A positive integer representing the number of nodes in the tree");break;case"Cographs":r.input1.show(),r.input2.hide(),r.input1.attr("placeholder","The order of the cograph")}}),r.generateTypeSelector.change()},Generate.prototype.initSubmitEvent=function(){var p=this;p.submitButton.click(function(){var e=p.networkName.val(),t=p.generateTypeSelector.val(),a=p.generateKindSelector.val(),r=p.input1.val(),n=p.input2.val(),o=$("#input-3").val(),i=[];if(""!=e){if(i.push(e),i.push(t),i.push(a),p.input1.is(":visible")){if(""==r||isNaN(r))return;i.push(r)}if(p.input2.is(":visible")){if(""==n||isNaN(n))return;i.push(n)}if(null!=o){if(""==o||isNaN(o))return;i.push(o)}var l=i.join("^");wnatajax.post({url:"/generate/main/",data:{data:l},success:function(e){200==e.code&&window.location.reload()},fail:function(e){}})}}),p.clearButton.click(function(){p.networkName.val(""),p.input1.val(""),p.input2.val(""),p.input2.hide(),p.input1.show();p.generateTypeSelector.val("Atlas"),p.pushSelector(p.generateKindSelector,["Atlas"]),p.input1.attr("placeholder","graph number in Atlas")})},Generate.prototype.pushSelector=function(e,t){for(var a in e.empty(),t){var r=t[a],n="<option value="+r+">"+r+"</option>";e.append($(n))}},$(function(){var e=new TableControl,t=new Generate;e.run(),t.run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
